pipeline {
    agent any

    tools {
        jdk 'openjdk-15'
    }

    environment {
        TOOLCHAIN_DIR = '/opt/arm32'
    }

    stages {
        stage('Clone repository (branch)') {
            when {
                anyOf {
                    environment name: 'PROMOTED_BUILD_NUMBER', value: '0'
                    not {
                        environment name: 'REPO', value: 'gluonhq/gluonjfx'
                    }
                    not {
                        environment name: 'BRANCH', value: 'build'
                    }
                }
            }
            steps {
                checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[url: "git@github.com:${env.REPO}.git", credentialsId: 'github-account-tiainen']], branches: [[name: "${env.BRANCH}"]]], poll: false
            }    
        }

        stage('Clone repository (promoted tag)') {
            when {
                allOf {
                    environment name: 'BRANCH', value: 'build'
                    not {
                        environment name: 'PROMOTED_BUILD_NUMBER', value: '0'
                    }
                }
            }
            steps {
                checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[url: "git@github.com:${env.REPO}.git", credentialsId: 'github-account-tiainen']], branches: [[name: "${env.MAJOR_VERSION}+${env.PROMOTED_BUILD_NUMBER}-gluon"]]], poll: false
            }    
        }

        stage('Clean repository') {
            steps {
                sh "git clean -d -x -f"
            }
        }

        stage('Gradle build') {
            steps {
                sh "sh gradlew --no-daemon --info --refresh-dependencies -PPROMOTED_BUILD_NUMBER=${env.PROMOTED_BUILD_NUMBER} -PUSE_DRM -PCOMPILE_TARGETS=arm32fb -PCROSS_TOOLS_DIR=${env.TOOLCHAIN_DIR} clean all"
            }
        }

        stage('Add DRM lib') {
            when {
                not {
                    environment name: 'GLUON_DRM_VERSION', value: ''
                }
            }
            steps {
                sh "scp root@download2.gluonhq.com:/var/www/html/restricted/openjfx/drm/libgluon_drm-${GLUON_DRM_VERSION}.so build/artifacts/javafx-sdk-${env.MAJOR_VERSION}/lib/"
                sh "cd build/artifacts && zip -ur bundles/javafx-sdk-${env.MAJOR_VERSION}.zip javafx-sdk-${env.MAJOR_VERSION}"
            }
        }

        stage('Upload zip (ea)') {
            when {
                environment name: 'MILESTONE_FCS', value: 'false'
            }
            steps {
                sh "scp build/artifacts/bundles/javafx-sdk-${env.MAJOR_VERSION}.zip root@download2.gluonhq.com:/var/www/html/openjfx/${MAJOR_VERSION}/openjfx-${env.MAJOR_VERSION}-ea+${env.PROMOTED_BUILD_NUMBER}_linux-arm32_bin-sdk.zip"
                sh "ssh root@download2.gluonhq.com 'cd /var/www/html/openjfx/${MAJOR_VERSION} && sha256sum openjfx-${env.MAJOR_VERSION}-ea+${env.PROMOTED_BUILD_NUMBER}_linux-arm32_bin-sdk.zip > openjfx-${env.MAJOR_VERSION}-ea+${env.PROMOTED_BUILD_NUMBER}_linux-arm32_bin-sdk.zip.sha256'"
            }
        }

        stage('Upload zip (fcs)') {
            when {
                environment name: 'MILESTONE_FCS', value: 'true'
            }
            steps {
                sh "scp build/artifacts/bundles/javafx-sdk-${env.MAJOR_VERSION}.zip root@download2.gluonhq.com:/var/www/html/openjfx/${MAJOR_VERSION}/openjfx-${env.MAJOR_VERSION}_linux-arm32_bin-sdk.zip"
                sh "ssh root@download2.gluonhq.com 'cd /var/www/html/openjfx/${MAJOR_VERSION} && sha256sum openjfx-${env.MAJOR_VERSION}_linux-arm32_bin-sdk.zip > openjfx-${env.MAJOR_VERSION}_linux-arm32_bin-sdk.zip.sha256'"
            }
        }
    }
}
