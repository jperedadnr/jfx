/*
 * Jenkins Pipeline script for building OpenJFX. Final SDKs are stored as job artifacts.
 *
 * Target: windows-x86_32
 * Versions: dynamic, dynamic monocle
 *
 * Mandatory Job Parameters:
 *   - REPO:  defines the repository to clone: git@github.com:${REPO}.git
 *   - TAG:   defines the tag to checkout: refs/tags/${TAG}
 *
 * Optional Job Parameters:
 *   - MILESTONE_FCS:  if set to false: build an early access release; if set to true: build a milestone release
 *   - BUILD_DYNAMIC:  builds the dynamic SDK for use with a regular JVM
 *   - BUILD_MONOCLE:  builds a dynamic SDK including monocle
 *   - COMPILE_MEDIA:  enable compiling native media components
 *   - COMPILE_WEBKIT: enable compiling native webkit
 */

pipeline {
    agent {
        label 'aws && windows && openjfx'
    }

    environment {
        VS150COMNTOOLS = "C:\\progra~2\\micros~1\\2019\\Community\\VC\\Auxiliary\\Build"
        MSVC_VER = "14.28.29910"
        MSVC_REDIST_VER = "14.28.29910"
        WINDOWS_CRT_VER = "142"
    }

    options {
        skipDefaultCheckout()
        copyArtifactPermission('OpenJFX-build')
    }

    tools {
        jdk 'openjdk-15 32bit'
    }

    stages {
        stage('Verify required REPO parameter') {
            when {
                expression {
                    return params.REPO == ''
                }
            }
            steps {
                error("REPO parameter is required.")
            }
        }

        stage('Verify required TAG parameter') {
            when {
                expression {
                    return params.TAG == ''
                }
            }
            steps {
                error("TAG parameter is required.")
            }
        }

        stage('Clone repository') {
            steps {
                sh "git clone git@github.com:${env.REPO}.git repo"
                dir("repo") {
                    sh "git config remote.origin.url git@github.com:${env.REPO}.git"
                    sh "git fetch --tags --progress git@github.com:${env.REPO}.git +refs/heads/*:refs/remotes/origin/*"
                }
            }    
        }

        stage('Checkout tag') {
            steps {
                dir("repo") {
                    sh "git checkout -f `git rev-parse ${env.TAG}^{commit}`"
                }
            }    
        }

        stage('Clean repository') {
            steps {
                dir("repo") {
                    sh "git clean -d -x -f"
                }
            }
        }

        /*
         * Load generic environment variables.
         * MAJOR_VERSION: determined from the "jfx.release.*.version" properties in build.properties (i.e. 17, 17.0.1)
         * REPO_ACCOUNT: the GitHub account name of the repository that is being cloned
         */
        stage('Load generic env vars') {
            steps {
                dir("repo") {
                    script {
                        env.MAJOR_VERSION = """${sh(
                            returnStdout: true,
                            script: '''#!/bin/bash -xe
                                JFX_MAJOR=$(cat build.properties | grep "^jfx\\.release\\.major\\.version" | cut -d= -f2 | tr -d "\\n")
                                JFX_MINOR=$(cat build.properties | grep "^jfx\\.release\\.minor\\.version" | cut -d= -f2 | tr -d "\\n")
                                JFX_SECURITY=$(cat build.properties | grep "^jfx\\.release\\.security\\.version" | cut -d= -f2 | tr -d "\\n")
                                JFX_PATCH=$(cat build.properties | grep "^jfx\\.release\\.patch\\.version" | cut -d= -f2 | tr -d "\\n")
                                if [[ ${JFX_PATCH} -gt 0 ]]; then
                                    echo -n "${JFX_MAJOR}.${JFX_MINOR}.${JFX_SECURITY}.${JFX_PATCH}"
                                elif [[ ${JFX_MINOR} -gt 0 || ${JFX_SECURITY} -gt 0 ]]; then
                                    echo -n "${JFX_MAJOR}.${JFX_MINOR}.${JFX_SECURITY}"
                                else
                                    echo -n "${JFX_MAJOR}"
                                fi
                            '''
                        )}"""
                        env.REPO_ACCOUNT = """${sh(
                            returnStdout: true,
                            script: 'echo ${REPO} | cut -d/ -f1 | tr -d "\\n"'
                        )}"""
                    }
                }
            }
        }

        /*
         * Load environment variables specific to fork builds.
         * PROMOTED_BUILD_NUMBER: set to the TAG parameter
         */
        stage('Load env vars (fork)') {
            when {
                not {
                    environment name: 'REPO', value: 'gluonhq/gluonjfx'
                }
            }
            steps {
                dir("repo") {
                    script {
                        env.PROMOTED_BUILD_NUMBER = """${sh(
                            returnStdout: true,
                            script: 'echo ${TAG} | tr -d "\\n"'
                        )}"""
                    }
                }
            }
        }

        /*
         * Load environment variables specific to official builds.
         * PROMOTED_BUILD_NUMBER: set to the promoted build number of the promoted tag (i.e. number 3 from the tag 17+3-gluon)
         */
        stage('Load env vars (official)') {
            when {
                environment name: 'REPO', value: 'gluonhq/gluonjfx'
            }
            steps {
                dir("repo") {
                    script {
                        env.PROMOTED_BUILD_NUMBER = """${sh(
                            returnStdout: true,
                            script: 'echo ${TAG} | cut -d- -f1 | cut -d+ -f2 | tr -d "\\n"'
                        )}"""
                    }
                }
            }
        }

        stage('Gradle dynamic build') {
            when {
                expression {
                    return params.BUILD_DYNAMIC
                }
            }
            steps {
                dir("repo") {
                    sh "mkdir -p artifacts/dynamic"
                    sh "chmod +x gradlew.bat"
                    sh "./gradlew.bat --no-daemon -PCONF=Release -PMILESTONE_FCS=${env.MILESTONE_FCS} -PMAVEN_PUBLISH=true --info --refresh-dependencies -PPROMOTED_BUILD_NUMBER=${env.PROMOTED_BUILD_NUMBER} -PHUDSON_BUILD_NUMBER=${env.BUILD_NUMBER} -PHUDSON_JOB_NAME=${env.JOB_BASE_NAME} -PUSE_DEPEND=false -PBUILD_SRC_ZIP=true -PCOMPILE_WEBKIT=${env.COMPILE_WEBKIT} -PCOMPILE_MEDIA=${env.COMPILE_MEDIA} -PBUILD_LIBAV_STUBS=true -PSTUB_RUNTIME= all publishToMavenLocal"
                }
            }
        }

        stage('Rename dynamic maven publication artifacts') {
            when {
                expression {
                    return params.BUILD_DYNAMIC
                }
            }
            steps {
                dir("repo") {
                    sh 'for i in `find build/publications/*-win.jar`; do mv $i "${i%%.jar}-x86.jar"; done'
                }
            }
        }

        stage('Rename dynamic artifact zips (fork)') {
            when {
                expression {
                    return params.BUILD_DYNAMIC && params.REPO != 'gluonhq/gluonjfx'
                }
            }
            steps {
                dir("repo") {
                    sh "mv build/artifacts/bundles/javafx-jmods-${env.MAJOR_VERSION}.zip artifacts/dynamic/openjfx-${env.MAJOR_VERSION}+${env.TAG}_windows-x86_bin-jmods.zip"
                    sh "mv build/artifacts/bundles/javafx-sdk-${env.MAJOR_VERSION}.zip artifacts/dynamic/openjfx-${env.MAJOR_VERSION}+${env.TAG}_windows-x86_bin-sdk.zip"
                }
            }
        }

        stage('Rename dynamic artifact zips (official / ea)') {
            when {
                expression {
                    return params.BUILD_DYNAMIC && params.REPO == 'gluonhq/gluonjfx' && !params.MILESTONE_FCS
                }
            }
            steps {
                dir("repo") {
                    sh "mv build/artifacts/bundles/javafx-jmods-${env.MAJOR_VERSION}.zip artifacts/dynamic/openjfx-${env.MAJOR_VERSION}-ea+${env.PROMOTED_BUILD_NUMBER}_windows-x86_bin-jmods.zip"
                    sh "mv build/artifacts/bundles/javafx-sdk-${env.MAJOR_VERSION}.zip artifacts/dynamic/openjfx-${env.MAJOR_VERSION}-ea+${env.PROMOTED_BUILD_NUMBER}_windows-x86_bin-sdk.zip"
                }
            }
        }

        stage('Rename dynamic artifact zips (official / fcs)') {
            when {
                expression {
                    return params.BUILD_DYNAMIC && params.REPO == 'gluonhq/gluonjfx' && params.MILESTONE_FCS
                }
            }
            steps {
                dir("repo") {
                    sh "mv build/artifacts/bundles/javafx-jmods-${env.MAJOR_VERSION}.zip artifacts/dynamic/openjfx-${env.MAJOR_VERSION}_windows-x86_bin-jmods.zip"
                    sh "mv build/artifacts/bundles/javafx-sdk-${env.MAJOR_VERSION}.zip artifacts/dynamic/openjfx-${env.MAJOR_VERSION}_windows-x86_bin-sdk.zip"
                }
            }
        }

        stage('Archive dynamic artifacts') {
            when {
                expression {
                    return params.BUILD_DYNAMIC
                }
            }
            steps {
                dir("repo") {
                    archiveArtifacts artifacts: 'artifacts/dynamic/openjfx-*-jmods.zip,artifacts/dynamic/openjfx-*-sdk.zip,build/publications/*-win-x86.jar', fingerprint: true
                }
            }
        }

        stage('Gradle dynamic monocle build') {
            when {
                expression {
                    return params.BUILD_DYNAMIC && params.BUILD_MONOCLE
                }
            }
            steps {
                dir("repo") {
                    sh "mkdir -p artifacts/dynamic-monocle"
                    sh "chmod +x gradlew.bat"
                    sh "./gradlew.bat --no-daemon -PINCLUDE_MONOCLE=true -PCONF=Release -PMILESTONE_FCS=${env.MILESTONE_FCS} --info --refresh-dependencies -PPROMOTED_BUILD_NUMBER=${env.PROMOTED_BUILD_NUMBER} -PHUDSON_BUILD_NUMBER=${env.BUILD_NUMBER} -PHUDSON_JOB_NAME=${env.JOB_BASE_NAME} -PUSE_DEPEND=false -PBUILD_SRC_ZIP=true -PCOMPILE_WEBKIT=${env.COMPILE_WEBKIT} -PCOMPILE_MEDIA=${env.COMPILE_MEDIA} -PBUILD_LIBAV_STUBS=true -PSTUB_RUNTIME= all"
                }
            }
        }

        stage('Rename dynamic monocle maven publication artifacts') {
            when {
                expression {
                    return params.BUILD_DYNAMIC && params.BUILD_MONOCLE
                }
            }
            steps {
                dir("repo") {
                    sh 'for i in `find build/publications/*-win.jar`; do mv $i "${i%%.jar}-x86-monocle.jar"; done'
                }
            }
        }

        stage('Rename dynamic monocle artifact zips (fork)') {
            when {
                expression {
                    return params.BUILD_DYNAMIC && params.BUILD_MONOCLE && params.REPO != 'gluonhq/gluonjfx'
                }
            }
            steps {
                dir("repo") {
                    sh "mv build/artifacts/bundles/javafx-sdk-${env.MAJOR_VERSION}.zip artifacts/dynamic-monocle/openjfx-${env.MAJOR_VERSION}+${env.TAG}_monocle-windows-x86_bin-sdk.zip"
                }
            }
        }

        stage('Rename dynamic monocle artifact zips (official / ea)') {
            when {
                expression {
                    return params.BUILD_DYNAMIC && params.BUILD_MONOCLE && params.REPO == 'gluonhq/gluonjfx' && !params.MILESTONE_FCS
                }
            }
            steps {
                dir("repo") {
                    sh "mv build/artifacts/bundles/javafx-sdk-${env.MAJOR_VERSION}.zip artifacts/dynamic-monocle/openjfx-${env.MAJOR_VERSION}-ea+${env.PROMOTED_BUILD_NUMBER}_monocle-windows-x86_bin-sdk.zip"
                }
            }
        }

        stage('Rename dynamic monocle artifact zips (official / fcs)') {
            when {
                expression {
                    return params.BUILD_DYNAMIC && params.BUILD_MONOCLE && params.REPO == 'gluonhq/gluonjfx' && params.MILESTONE_FCS
                }
            }
            steps {
                dir("repo") {
                    sh "mv build/artifacts/bundles/javafx-sdk-${env.MAJOR_VERSION}.zip artifacts/dynamic-monocle/openjfx-${env.MAJOR_VERSION}_monocle-windows-x86_bin-sdk.zip"
                }
            }
        }

        stage('Archive dynamic monocle artifacts') {
            when {
                expression {
                    return params.BUILD_DYNAMIC && params.BUILD_MONOCLE
                }
            }
            steps {
                dir("repo") {
                    archiveArtifacts artifacts: 'artifacts/dynamic-monocle/openjfx-*-sdk.zip,build/publications/*-win-x86-monocle.jar', fingerprint: true
                }
            }
        }
    }
}
