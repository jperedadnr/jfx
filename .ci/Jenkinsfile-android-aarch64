/*
 * Jenkins Pipeline script for building OpenJFX.
 *
 * Target: android-aarch64
 * Versions: static
 *
 * Mandatory Job Parameters:
 *   - REPO:  defines what repository to checkout: git@github.com:${REPO}.git
 *   - TAG:   defines the tag used to checkout
 *
 * Optional Job Parameters:
 *   - MILESTONE_FCS: if set to false: build an early access release; if set to true: build a milestone release
 *
 * Release types:
 *   - fork:         REPO does not equal to gluonhq/gluonjfx
 *   - early access: REPO matches gluonhq/gluonjfx and MILESTONE_FCS is false
 *   - milestone:    REPO matches gluonhq/gluonjfx and MILESTONE_FCS is true
 *
 * Final static SDKs:
 *    - fork:         https://download2.gluonhq.com/substrate/javafxstaticsdk/forks/${REPO_ACCOUNT}/openjfx-${MAJOR_VERSION}+${TAG}-linux-aarch64-static.zip
 *    - early access: https://download2.gluonhq.com/substrate/javafxstaticsdk/openjfx-${MAJOR_VERSION}-ea+${BUILD_NUMBER}-linux-aarch64-static.zip
 *    - milestone:    https://download2.gluonhq.com/substrate/javafxstaticsdk/openjfx-${MAJOR_VERSION}-linux-aarch64-static.zip
 */

pipeline {
    agent any

    tools {
        jdk 'openjdk-15'
    }

    environment {
        ANDROID_NDK = '/opt/android-ndk-r20b'
        FREETYPE_DIR = '/opt/freetype/install/arm64-v8a'
    }

    stages {
        stage('Verify required REPO parameter') {
            when {
                expression {
                    return params.REPO == ''
                }
            }
            steps {
                error("REPO parameter is required.")
            }
        }

        stage('Verify required TAG parameter') {
            when {
                expression {
                    return params.TAG == ''
                }
            }
            steps {
                error("TAG parameter is required.")
            }
        }

        stage('Clone repository') {
            steps {
                checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[url: "git@github.com:${env.REPO}.git", credentialsId: 'github-account-tiainen']], branches: [[name: "refs/tags/${env.TAG}"]]], poll: false
            }    
        }

        stage('Clean repository') {
            steps {
                sh "git clean -d -x -f"
            }
        }

        /*
         * Load generic environment variables.
         * MAJOR_VERSION: determined from the "jfx.release.*.version" properties in build.properties (i.e. 17, 17.0.1)
         * REPO_ACCOUNT: the GitHub account name of the repository that is being cloned
         */
        stage('Load generic env vars') {
            steps {
                script {
                    env.MAJOR_VERSION = """${sh(
                        returnStdout: true,
                        script: '''#!/bin/bash -xe
                            JFX_MAJOR=$(cat build.properties | grep "^jfx\\.release\\.major\\.version" | cut -d= -f2 | tr -d "\\n")
                            JFX_MINOR=$(cat build.properties | grep "^jfx\\.release\\.minor\\.version" | cut -d= -f2 | tr -d "\\n")
                            JFX_SECURITY=$(cat build.properties | grep "^jfx\\.release\\.security\\.version" | cut -d= -f2 | tr -d "\\n")
                            JFX_PATCH=$(cat build.properties | grep "^jfx\\.release\\.patch\\.version" | cut -d= -f2 | tr -d "\\n")
                            if [[ ${JFX_PATCH} -gt 0 ]]; then
                                echo -n "${JFX_MAJOR}.${JFX_MINOR}.${JFX_SECURITY}.${JFX_PATCH}"
                            elif [[ ${JFX_MINOR} -gt 0 || ${JFX_SECURITY} -gt 0 ]]; then
                                echo -n "${JFX_MAJOR}.${JFX_MINOR}.${JFX_SECURITY}"
                            else
                                echo -n "${JFX_MAJOR}"
                            fi
                        '''
                    )}"""
                    env.REPO_ACCOUNT = """${sh(
                        returnStdout: true,
                        script: 'echo ${REPO} | cut -d/ -f1 | tr -d "\\n"'
                    )}"""
                }
            }
        }

        /*
         * Load environment variables specific to fork builds.
         * BUILD_NUMBER: set to the TAG parameter
         */
        stage('Load env vars (fork)') {
            when {
                not {
                    environment name: 'REPO', value: 'gluonhq/gluonjfx'
                }
            }
            steps {
                script {
                    env.BUILD_NUMBER = """${sh(
                        returnStdout: true,
                        script: 'echo ${TAG} | tr -d "\\n"'
                    )}"""
                }
            }
        }

        /*
         * Load environment variables specific to official builds.
         * BUILD_NUMBER: set to the promoted build number of the promoted tag (i.e. number 3 from the tag 17+3-gluon)
         */
        stage('Load env vars (official)') {
            when {
                environment name: 'REPO', value: 'gluonhq/gluonjfx'
            }
            steps {
                script {
                    env.BUILD_NUMBER = """${sh(
                        returnStdout: true,
                        script: 'echo ${TAG} | cut -d- -f1 | cut -d+ -f2 | tr -d "\\n"'
                    )}"""
                }
            }
        }

        stage('Gradle static build') {
            steps {
                sh "sh gradlew --no-daemon --info --refresh-dependencies -PPROMOTED_BUILD_NUMBER=${env.BUILD_NUMBER} -PCOMPILE_MEDIA=false -PSTATIC_BUILD=true -PCOMPILE_TARGETS=android -PANDROID_NDK=${env.ANDROID_NDK} -PFREETYPE_DIR=${env.FREETYPE_DIR} clean sdk"
            }
        }

        stage('Rename sdk folder) {
            steps {
                sh "mv build/android-sdk build/sdk"
            }
        }

        stage('Rename artifacts') {
            steps {
                sh "cp build/sdk/lib/javafx.base.jar build/sdk/lib/javafx-base.jar"
                sh "cp build/sdk/lib/javafx.controls.jar build/sdk/lib/javafx-controls.jar"
                sh "cp build/sdk/lib/javafx.fxml.jar build/sdk/lib/javafx-fxml.jar"
                sh "cp build/sdk/lib/javafx.graphics.jar build/sdk/lib/javafx-graphics.jar"
            }
        }

        stage('Copy native libs') {
            steps {
                sh "cp ${env.FREETYPE_DIR}/lib/libfreetype.so build/sdk/lib"
            }
        }

        stage('Create static zip') {
            steps {
                sh "cd build && zip -r ../javafx-static-sdk-${env.MAJOR_VERSION}.zip sdk"
            }
        }

        stage('Upload static zip (fork)') {
            when {
                not {
                    environment name: 'REPO', value: 'gluonhq/gluonjfx'
                }
            }
            steps {
                sh "ssh root@download2.gluonhq.com 'mkdir -p /var/www/html/substrate/javafxstaticsdk/forks/${env.REPO_ACCOUNT}'"
                sh "scp javafx-static-sdk-${env.MAJOR_VERSION}.zip root@download2.gluonhq.com:/var/www/html/substrate/javafxstaticsdk/forks/${env.REPO_ACCOUNT}/openjfx-${env.MAJOR_VERSION}+${env.TAG}-android-aarch64-static.zip"
            }
        }

        stage('Upload static zip (official / ea)') {
            when {
                allOf {
                    environment name: 'REPO', value: 'gluonhq/gluonjfx'
                    environment name: 'MILESTONE_FCS', value: 'false'
                }
            }
            steps {
                sh "scp javafx-static-sdk-${env.MAJOR_VERSION}.zip root@download2.gluonhq.com:/var/www/html/substrate/javafxstaticsdk/openjfx-${env.MAJOR_VERSION}-ea+${env.BUILD_NUMBER}-android-aarch64-static.zip"
                sh "scp javafx-static-sdk-${env.MAJOR_VERSION}.zip root@download2.gluonhq.com:/var/www/html/substrate/javafxstaticsdk/openjfx-${env.MAJOR_VERSION}-latest-android-aarch64-static.zip"
            }
        }

        stage('Upload static zip (official / fcs)') {
            when {
                allOf {
                    environment name: 'REPO', value: 'gluonhq/gluonjfx'
                    environment name: 'MILESTONE_FCS', value: 'true'
                }
            }
            steps {
                sh "scp javafx-static-sdk-${env.MAJOR_VERSION}.zip root@download2.gluonhq.com:/var/www/html/substrate/javafxstaticsdk/openjfx-${env.MAJOR_VERSION}-android-aarch64-static.zip"
                sh "scp javafx-static-sdk-${env.MAJOR_VERSION}.zip root@download2.gluonhq.com:/var/www/html/substrate/javafxstaticsdk/openjfx-${env.MAJOR_VERSION}-latest-android-aarch64-static.zip"
            }
        }
    }
}
