/*
 * Jenkins Pipeline script for building OpenJFX.
 *
 * Target: linux-arm32
 * Versions: dynamic
 *
 * Mandatory Job Parameters:
 *   - REPO:  defines what repository to checkout: git@github.com:${REPO}.git
 *   - TAG:   defines the tag used to checkout: refs/tags/${TAG}
 *
 * Optional Job Parameters:
 *   - MILESTONE_FCS:     if set to false: build an early access release; if set to true: build a milestone release
 *   - GLUON_DRM_VERSION: the version of the Gluon DRM library to include in the final SDK
 *
 * Release types:
 *   - fork:         REPO does not equal to gluonhq/gluonjfx
 *   - early access: REPO matches gluonhq/gluonjfx and MILESTONE_FCS is false
 *   - milestone:    REPO matches gluonhq/gluonjfx and MILESTONE_FCS is true
 *
 * Final SDKs:
 *    - fork:         https://download2.gluonhq.com/openjfx/forks/${REPO_ACCOUNT}/${MAJOR_VERSION}/openjfx-${MAJOR_VERSION}+${TAG}_linux-arm32_bin-sdk.zip
 *    - early access: https://download2.gluonhq.com/openjfx/${MAJOR_VERSION}/openjfx-${MAJOR_VERSION}-ea+${BUILD_NUMBER}_linux-arm32_bin-sdk.zip
 *    - milestone:    https://download2.gluonhq.com/openjfx/${MAJOR_VERSION}/openjfx-${MAJOR_VERSION}_linux-arm32_bin-sdk.zip
 */

pipeline {
    agent any

    tools {
        jdk 'openjdk-15'
    }

    environment {
        TOOLCHAIN_DIR = '/opt/arm32'
    }

    stages {
        stage('Verify required REPO parameter) {
            when {
                expression {
                    return params.REPO == ''
                }
            }
            steps {
                error("REPO parameter is required.")
            }
        }

        stage('Verify required TAG parameter) {
            when {
                expression {
                    return params.TAG == ''
                }
            }
            steps {
                error("TAG parameter is required.")
            }
        }

        stage('Clone repository') {
            steps {
                checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[url: "git@github.com:${env.REPO}.git", credentialsId: 'github-account-tiainen']], branches: [[name: "refs/tags/${env.TAG}"]]], poll: false
            }    
        }

        stage('Clean repository') {
            steps {
                sh "git clean -d -x -f"
            }
        }

        /*
         * Load generic environment variables.
         * MAJOR_VERSION: determined from the "jfx.release.*.version" properties in build.properties (i.e. 17, 17.0.1)
         * REPO_ACCOUNT: the GitHub account name of the repository that is being cloned
         */
        stage('Load generic env vars') {
            steps {
                script {
                    env.MAJOR_VERSION = """${sh(
                        returnStdout: true,
                        script: '''#!/bin/bash -xe
                            JFX_MAJOR=$(cat build.properties | grep "^jfx\\.release\\.major\\.version" | cut -d= -f2 | tr -d "\\n")
                            JFX_MINOR=$(cat build.properties | grep "^jfx\\.release\\.minor\\.version" | cut -d= -f2 | tr -d "\\n")
                            JFX_SECURITY=$(cat build.properties | grep "^jfx\\.release\\.security\\.version" | cut -d= -f2 | tr -d "\\n")
                            JFX_PATCH=$(cat build.properties | grep "^jfx\\.release\\.patch\\.version" | cut -d= -f2 | tr -d "\\n")
                            if [[ ${JFX_PATCH} -gt 0 ]]; then
                                echo -n "${JFX_MAJOR}.${JFX_MINOR}.${JFX_SECURITY}.${JFX_PATCH}"
                            elif [[ ${JFX_MINOR} -gt 0 || ${JFX_SECURITY} -gt 0 ]]; then
                                echo -n "${JFX_MAJOR}.${JFX_MINOR}.${JFX_SECURITY}"
                            else
                                echo -n "${JFX_MAJOR}"
                            fi
                        '''
                    )}"""
                    env.REPO_ACCOUNT = """${sh(
                        returnStdout: true,
                        script: 'echo ${REPO} | cut -d/ -f1 | tr -d "\\n"'
                    )}"""
                }
            }
        }

        /*
         * Load environment variables specific to fork builds.
         * BUILD_NUMBER: set to the TAG parameter
         */
        stage('Load env vars (fork)') {
            when {
                not {
                    environment name: 'REPO', value: 'gluonhq/gluonjfx'
                }
            }
            steps {
                script {
                    env.BUILD_NUMBER = """${sh(
                        returnStdout: true,
                        script: 'echo ${TAG} | tr -d "\\n"'
                    )}"""
                }
            }
        }

        /*
         * Load environment variables specific to official builds.
         * BUILD_NUMBER: set to the promoted build number of the promoted tag (i.e. number 3 from the tag 17+3-gluon)
         */
        stage('Load env vars (official)') {
            when {
                environment name: 'REPO', value: 'gluonhq/gluonjfx'
            }
            steps {
                script {
                    env.BUILD_NUMBER = """${sh(
                        returnStdout: true,
                        script: 'echo ${TAG} | cut -d- -f1 | cut -d+ -f2 | tr -d "\\n"'
                    )}"""
                }
            }
        }

        stage('Gradle build') {
            steps {
                sh "sh gradlew --no-daemon --info --refresh-dependencies -PPROMOTED_BUILD_NUMBER=${env.BUILD_NUMBER} -PCOMPILE_TARGETS=arm32fb -PCROSS_TOOLS_DIR=${env.TOOLCHAIN_DIR} clean all"
            }
        }

        stage('Add dynamic DRM lib') {
            when {
                not {
                    environment name: 'GLUON_DRM_VERSION', value: ''
                }
            }
            steps {
                sh "scp root@download2.gluonhq.com:/var/www/html/restricted/openjfx/drm/lib-${GLUON_DRM_VERSION}/arm32/libgluon_drm.so build/artifacts/javafx-sdk-${env.MAJOR_VERSION}/lib/libgluon_drm-${GLUON_DRM_VERSION}.so"
                sh "cd build/artifacts && zip -ur bundles/javafx-sdk-${env.MAJOR_VERSION}.zip javafx-sdk-${env.MAJOR_VERSION}"
            }
        }

        stage('Upload zip (fork)') {
            when {
                not {
                    environment name: 'REPO', value: 'gluonhq/gluonjfx'
                }
            }
            steps {
                sh "ssh root@download2.gluonhq.com 'mkdir -p /var/www/html/openjfx/forks/${env.REPO_ACCOUNT}/${env.MAJOR_VERSION}'"
                sh "scp build/artifacts/bundles/javafx-sdk-${env.MAJOR_VERSION}.zip root@download2.gluonhq.com:/var/www/html/openjfx/forks/${env.REPO_ACCOUNT}/${env.MAJOR_VERSION}/openjfx-${env.MAJOR_VERSION}+${env.TAG}_linux-arm32_bin-sdk.zip"
                sh "ssh root@download2.gluonhq.com 'cd /var/www/html/openjfx/forks/${env.REPO_ACCOUNT}/${env.MAJOR_VERSION} && sha256sum openjfx-${env.MAJOR_VERSION}+${env.TAG}_linux-arm32_bin-sdk.zip > openjfx-${env.MAJOR_VERSION}+${env.TAG}_linux-arm32_bin-sdk.zip.sha256'"
            }
        }

        stage('Upload zip (official / ea)') {
            when {
                allOf {
                    environment name: 'REPO', value: 'gluonhq/gluonjfx'
                    environment name: 'MILESTONE_FCS', value: 'false'
                }
            }
            steps {
                sh "ssh root@download2.gluonhq.com 'mkdir -p /var/www/html/openjfx/${env.MAJOR_VERSION}'"
                sh "scp build/artifacts/bundles/javafx-sdk-${env.MAJOR_VERSION}.zip root@download2.gluonhq.com:/var/www/html/openjfx/${env.MAJOR_VERSION}/openjfx-${env.MAJOR_VERSION}-ea+${env.BUILD_NUMBER}_linux-arm32_bin-sdk.zip"
                sh "ssh root@download2.gluonhq.com 'cd /var/www/html/openjfx/${env.MAJOR_VERSION} && sha256sum openjfx-${env.MAJOR_VERSION}-ea+${env.BUILD_NUMBER}_linux-arm32_bin-sdk.zip > openjfx-${env.MAJOR_VERSION}-ea+${env.BUILD_NUMBER}_linux-arm32_bin-sdk.zip.sha256'"
            }
        }

        stage('Upload zip (official / fcs)') {
            when {
                allOf {
                    environment name: 'REPO', value: 'gluonhq/gluonjfx'
                    environment name: 'MILESTONE_FCS', value: 'true'
                }
            }
            steps {
                sh "ssh root@download2.gluonhq.com 'mkdir -p /var/www/html/openjfx/${env.MAJOR_VERSION}'"
                sh "scp build/artifacts/bundles/javafx-sdk-${env.MAJOR_VERSION}.zip root@download2.gluonhq.com:/var/www/html/openjfx/${env.MAJOR_VERSION}/openjfx-${env.MAJOR_VERSION}_linux-arm32_bin-sdk.zip"
                sh "ssh root@download2.gluonhq.com 'cd /var/www/html/openjfx/${env.MAJOR_VERSION} && sha256sum openjfx-${env.MAJOR_VERSION}_linux-arm32_bin-sdk.zip > openjfx-${env.MAJOR_VERSION}_linux-arm32_bin-sdk.zip.sha256'"
            }
        }
    }
}
